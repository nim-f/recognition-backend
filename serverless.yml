app: backend2
service: backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  timeout: 20
  environment:
    USER_POOL: { Ref: UserPool }
    USER_POOL_CLIENT: { Ref: UserClient }
    ORIGINAL_BUCKET_NAME: ${self:service}-public-photos-${sls:stage}
    THUMBNAIL_BUCKET_NAME: ${self:service}-public-thumbs-${sls:stage}
    PHOTOS_TABLE: ${self:service}-photos-${sls:stage}
  httpApi:
    cors: true
    authorizers: 
      userAuthoriser:
        identitySource: $request.header.Authorization
        issuerUrl: {"Fn::Join": ["", ["https://cognito-idp.us-east-1.amazonaws.com/", { Ref: UserPool }]]}
        audience: { Ref: UserClient }
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
          - cognito-idp:AdminInitiateAuth
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminSetUserPassword
          Resource: "*"
        - Effect: Allow
          Action:
          - "s3:*"
          Resource: "arn:aws:s3:::${self:service}-public-photos-${sls:stage}" 
        - Effect: Allow
          Action:
          - "s3:*"
          Resource: "arn:aws:s3:::${self:service}-public-thumbs-${sls:stage}" 
        - Effect: Allow
          Action: 
            - "rekognition:detectLabels"
          Resource: "*"
        - Effect: Allow
          Action: 
          - 'dynamodb:PutItem'    
          - 'dynamodb:Get*'    
          - 'dynamodb:Scan'    
          - 'dynamodb:Query'    
          - 'dynamodb:UpdateItem'    
          - 'dynamodb:DeleteItem'    
          Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-photos-${sls:stage}"
         
resources:
  Resources:
    UserPool: 
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-pool-${sls:stage}
        Schema: 
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy: 
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]    
    UserClient: 
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-client-${sls:stage}
        GenerateSecret: false
        UserPoolId: 
          Ref: UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows: 
          - "ADMIN_NO_SRP_AUTH"



    PhotosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-photos-${sls:stage}
        AttributeDefinitions:
          - AttributeName: primary_key
            AttributeType: S
        KeySchema:
          - AttributeName: primary_key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    PhotoBucket: 
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-public-photos-${sls:stage}
    PhotoBucketAllowPublicReadPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PhotoBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement: 
            - Effect: Allow
              Action: 
                - "s3:*"
              Resource: 
                - !Join ['/', [!GetAtt [PhotoBucket, Arn], '*']]
              Principal: "*"    

    ThumbsBucket: 
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-public-thumbs-${sls:stage}
    ThumbsBucketAllowPublicReadPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ThumbsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement: 
            - Effect: Allow
              Action: 
                - "s3:*"
              Resource: 
                - !Join ['/', [!GetAtt [ThumbsBucket, Arn], '*']]
              Principal: "*"    
functions:
  register:
    handler: functions/register.register
    events:
      - httpApi:
          path: /register
          method: post
  login:
    handler: functions/login.login
    events:
      - httpApi:
          path: /login
          method: post

  savePhoto:
    handler: functions/savePhoto.savePhoto
    events:
      - httpApi:
          path: /
          method: post
          authorizer: 
            name: userAuthoriser
  updatePhoto:
    handler: functions/updatePhoto.updatePhoto
    events:
      - httpApi:
          path: /update
          method: post
          authorizer: 
            name: userAuthoriser
  deletePhoto:
    handler: functions/deletePhoto.deletePhoto
    events:
      - httpApi:
          path: /delete
          method: delete          
          authorizer: 
            name: userAuthoriser
  getPhotos:
    handler: functions/getPhotos.getPhotos        
    events: 
      - httpApi: 
          path: /
          method: get
          authorizer: 
            name: userAuthoriser
plugins:
  - serverless-offline
custom:
  serverless-offline:
    useChildProcesses: true